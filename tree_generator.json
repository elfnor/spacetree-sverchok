{
  "export_version": "0.060",
  "framed_nodes": {},
  "groups": {},
  "nodes": {
    "Integer": {
      "bl_idname": "IntegerNode",
      "color": [
        0.6079999804496765,
        0.6079999804496765,
        0.6079999804496765
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -428.8238525390625,
        772.46044921875
      ],
      "params": {
        "int_": 100
      },
      "width": 140.0
    },
    "Random": {
      "bl_idname": "RandomNode",
      "color": [
        0.6079999804496765,
        0.6079999804496765,
        0.6079999804496765
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -267.3354797363281,
        727.5147094726562
      ],
      "params": {},
      "width": 140.0
    },
    "Random Vector.002": {
      "bl_idname": "RandomVectorNode",
      "color": [
        0.0,
        0.5,
        0.5
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -264.1349792480469,
        833.8818969726562
      ],
      "params": {
        "count_inner": 1,
        "seed": 11
      },
      "width": 140.0
    },
    "Script Generator": {
      "bl_idname": "SvScriptNode",
      "color": [
        0.0,
        0.800000011920929,
        0.949999988079071
      ],
      "height": 100.0,
      "hide": false,
      "label": "tree_generator.py",
      "location": [
        125.25870513916016,
        1116.336181640625
      ],
      "params": {
        "button_names": "",
        "float_list": [
          0.0,
          0.75,
          0.10000000149011612,
          0.20000000298023224,
          10.0,
          0.019999999552965164,
          6.0,
          7.0,
          8.0,
          9.0,
          10.0,
          11.0,
          12.0,
          13.0,
          14.0,
          15.0,
          16.0,
          17.0,
          18.0,
          19.0,
          20.0,
          21.0,
          22.0,
          23.0,
          24.0,
          25.0,
          26.0,
          27.0,
          28.0,
          29.0,
          30.0,
          31.0
        ],
        "has_buttons": 0,
        "int_list": [
          0,
          100,
          2,
          15,
          1,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31
        ],
        "script_name": "tree_generator.py",
        "script_str": "import numpy as np\nimport time\n\nfrom mathutils import Vector, Matrix    \n\nfrom sverchok.data_structure import Matrix_listing\n\ndef closest_np2(xyz1, xyz2):\n    x2 = np.subtract.outer(xyz2[:,0], xyz1[:,0])\n    y2 = np.subtract.outer(xyz2[:,1], xyz1[:,1])\n    z2 = np.subtract.outer(xyz2[:,2], xyz1[:,2])\n    d2 = np.sum((x2**2, y2**2, z2**2), axis=0)\n    ci = d2.argmin(axis=1)\n    column_i = range(d2.shape[0])\n    dout = np.sqrt(d2[column_i, ci])\n    v = np.vstack((x2[column_i, ci], y2[column_i, ci], z2[column_i, ci]))    \n    return dout, ci, v.T\n\nclass SCA:\n\n    def __init__(self, d=0.3, NBP=2000, KILLDIST=5, INFLUENCE=15, endpoints=[], \n                 TROPISM=0.0, max_time=1.0, startpoints=[]):\n        self.killdistance = KILLDIST\n        self.branchlength = d\n        self.maxiterations = NBP\n        self.tropism = np.array(TROPISM)\n        self.influence = INFLUENCE if INFLUENCE > 0 else 1e16\n        self.max_time = max_time\n        \n        if len(startpoints) > 0:            \n            self.bpalln = np.array(startpoints)\n        else:\n            self.bpalln = np.array([[0, 0, 0]])      \n        \n        self.bpp = [None] * self.bpalln.shape[0]\n        self.bpc = [0] * self.bpalln.shape[0]\n        self.bpg = [0] * self.bpalln.shape[0]\n            \n        self.epn = np.array(endpoints)        \n        d, ci, v = closest_np2(self.bpalln, self.epn)\n        self.epbn = ci\n        self.epdn = d\n        self.epvn = v / self.epdn.reshape((-1, 1))\n        self.epbn[self.epdn >= self.influence] = -2\n        \n        \n    def addBranchPoint(self, bpn, pi, generation):\n        self.bpalln = np.append(self.bpalln, [bpn], axis=0)\n\n        self.bpp.append(pi)\n        self.bpc.append(0)\n        #self.bpg.append(generation + 1)\n        self.bpg = np.append(self.bpg, [generation+1])\n        self.bpc[pi] += 1  \n        bi = self.bpalln.shape[0] - 1\n        v = self.epn - bpn\n        d2 = (v**2).sum(axis=1)\n        index = (self.epbn != -1) & (d2 < self.epdn**2) & (d2 > self.killdistance**2)\n         \n        d  = np.sqrt(d2[index])\n        self.epvn[index] = v[index, :] / d.reshape((-1,1))\n        self.epdn[index] = d\n        \n        index2 = (index & (d2 < self.influence**2))               \n        self.epbn[index2] = bi\n        \n        index3 = (index & (d2 >= self.influence**2))                \n        self.epbn[index3] = -2\n        \n        index4 = (self.epbn != -1) & (d2 < self.epdn**2) & (d2 <= self.killdistance**2)                \n        self.epbn[index4] = -1    \n               \n        if self.bpc[pi] > 1:  # a branch point with two children will not grow any new branches ...\n            index_e = (self.epbn == pi)\n            index_b = (np.array(self.bpc) <= 1)\n            d, c, v = closest_np2(self.bpalln[index_b], self.epn[index_e])\n            # this turns c indixes into self.bpalln[index_b] into u indices into self.bpalln\n            #needs better variable names\n            t = np.arange(self.bpalln.shape[0])[index_b]\n            u = t[c]\n            # set points not within influence distance to -2 so they will be\n            # ignored in growBranches\n            u[d >= self.influence] = -2\n\n            self.epdn[index_e] = d\n            self.epbn[index_e] = u            \n            self.epvn[index_e] = v / d.reshape((-1,1))    \n                         \n    def growBranches(self, generation):\n        index = self.epbn >= 0        \n        epbn = self.epbn[index]\n        bis = np.unique(epbn)\n        \n        v_sums = np.empty((bis.shape[0], 3))\n        for col in range(3):\n            v_sums[:, col] = np.bincount(epbn, weights=self.epvn[index, col])[bis]\n#        d2 = (v_sums**2).sum(axis=1)\n#        d = np.sqrt(d2) /self.branchlength\n#        vd = v_sums / d.reshape((-1, 1))\n\n        n_hat = v_sums/(((v_sums**2).sum(axis=1))**0.5).reshape((-1,1))\n        n_tilde = (n_hat + self.tropism)\n        n_tilde = n_tilde/(((n_tilde**2).sum(axis=1))**0.5).reshape((-1,1))\n       \n        newbps = self.bpalln[bis] + n_tilde * self.branchlength\n        newbpps = bis        \n                \n        for newbp, newbpp in zip(newbps, newbpps):\n            self.addBranchPoint(newbp, newbpp, generation)\n                        \n    def iterate(self):\n        t0 = time.time()\n        for i in range(self.maxiterations):\n            nbp = self.bpalln.shape[0]    \n            self.growBranches(i)\n            if self.bpalln.shape[0] == nbp:\n                return\n            if (time.time() - t0) > self.max_time:\n                print('SCA timed out')\n                return\n        return\n\n    def bp_verts_edges_n(self):\n        \"\"\"\n        returns branchpoints verts as a list of positions\n        and edges as index to connect the branch points\n        and leaves matrices \n        \"\"\"\n        verts = []\n        edges = []\n        ends = []\n        ends_inds = []\n        for i, b in enumerate(self.bpalln):\n            bp_parent = self.bpp[i]\n            verts.append(list(b))\n            if bp_parent != None:\n                edges.append((bp_parent, i))\n            if self.bpc[i] == 0:\n                ends.append(True)\n                ends_inds.append(i)\n            else:\n                ends.append(False)  \n        process = ends_inds\n        # branch radii\n        br = [int(t) for t in ends]\n        finished = []\n        while len(process) > 0:\n            process.sort()\n            i = process.pop()\n            finished.append(i)\n            p = self.bpp[i]\n            if p != None:\n                br[p] = br[p] + br[i]\n                if p not in process:\n                    if p not in finished:\n                        process.insert(0, p)    \n                        \n        mats= []\n        for edge in edges:           \n            if ends[edge[1]]:\n                #calculate leaf directions\n                #end will always be edge[1]\n                v0 = Vector(verts[edge[0]])\n                v1 = Vector(verts[edge[1]])\n                dir1 = (v1 - v0).normalized()\n                dir2 = (dir1.cross(Vector((0.0, 0.0, 1.0)))).normalized()               \n                dir3 = -(dir1.cross(dir2)).normalized() \n                m = Matrix.Identity(4)\n                m[0][0:3] = dir1\n                m[1][0:3] = dir2\n                m[2][0:3] = dir3\n                m[3][0:3] = v1\n                m.transpose()\n                mats.append(m)\n\n        mats_out =  Matrix_listing(mats)\n     \n        return verts, edges, ends, br, mats_out\n        \ndef sv_main(npoints=100 , dist=0.05, min_dist=0.05, max_dist=2.0, tip_radius=0.01, trop=[], verts_in=[], verts_start=[]):\n\n    in_sockets = [\n        ['s', 'maximum branches', npoints],\n        ['s', 'branch length', dist],\n        ['s', 'minimum distance', min_dist],\n        ['s', 'maximum distance', max_dist],\n        ['s', 'tip radius', tip_radius], \n        ['v', 'tropism', trop],\n        ['v', 'End Vertices',  verts_in],\n        ['v', 'Start Vertices', verts_start]\n    ]\n    verts_out = []\n    edges_out = []\n    rad_out = []\n    ends_out = []\n    mats_out = []\n    if not verts_start:\n        verts_start = [[]]\n    if not trop:\n        trop = [0., 0., 0.]    \n        \n    if verts_in :\n        sca = SCA(NBP = npoints,\n                  d=dist,\n                  KILLDIST=min_dist,\n                  INFLUENCE=max_dist, \n                  TROPISM=trop[0],\n                  endpoints=verts_in[0],\n                  startpoints = verts_start[0])\n\n        sca.iterate()\n        verts_out, edges_out, ends_out, br, mats_out = sca.bp_verts_edges_n()\n        rad_out = [tip_radius*b**0.5 for b in br]\n        \n    out_sockets = [\n        ['v', 'Vertices', [verts_out]],\n        ['s', 'Edges', [edges_out]],\n        ['s', 'Branch radii', [rad_out]],\n        ['s', 'Ends mask', [ends_out]],\n        ['m', 'Leaf matrices', mats_out],\n    ]\n\n    return in_sockets, out_sockets"
      },
      "width": 195.3349609375
    },
    "Skin Viewer Draw": {
      "bl_idname": "SkinViewerNode",
      "color": [
        0.6079999804496765,
        0.6079999804496765,
        0.6079999804496765
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        358.48974609375,
        1215.5418701171875
      ],
      "params": {
        "basemesh_name": "Tree",
        "live_updates": 1
      },
      "width": 140.0
    },
    "Sv Instancer Node": {
      "bl_idname": "SvInstancerNode",
      "color": [
        0.0,
        0.5,
        0.20000000298023224
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        359.2927551269531,
        959.326904296875
      ],
      "params": {
        "activate": 1,
        "basemesh_name": "leaves",
        "grouping": 1,
        "has_instance": 1,
        "mesh_to_clone": "leaf_mesh",
        "objects_to_choose": "Tree"
      },
      "width": 145.2611083984375
    },
    "Vector Math": {
      "bl_idname": "VectorMathNode",
      "color": [
        0.6079999804496765,
        0.6079999804496765,
        0.6079999804496765
      ],
      "height": 100.0,
      "hide": false,
      "label": "SCALAR",
      "location": [
        -98.61164855957031,
        837.7597045898438
      ],
      "params": {
        "items_": "SCALAR",
        "scalar_output_socket": 0
      },
      "width": 177.35107421875
    },
    "Vectors in": {
      "bl_idname": "GenVectorsNode",
      "color": [
        0.6079999804496765,
        0.6079999804496765,
        0.6079999804496765
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -22.415679931640625,
        704.7338256835938
      ],
      "params": {
        "x_": 0.0,
        "y_": 0.0,
        "z_": -1.5
      },
      "width": 100.0
    },
    "Vectors in.001": {
      "bl_idname": "GenVectorsNode",
      "color": [
        0.6079999804496765,
        0.6079999804496765,
        0.6079999804496765
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -22.197185516357422,
        963.410400390625
      ],
      "params": {
        "x_": 0.0,
        "z_": 0.5
      },
      "width": 100.0
    }
  },
  "update_lists": [
    [
      "Integer",
      "Integer",
      "Random",
      "Count"
    ],
    [
      "Integer",
      "Integer",
      "Random Vector.002",
      "Count"
    ],
    [
      "Random Vector.002",
      "Random",
      "Vector Math",
      "U"
    ],
    [
      "Random",
      "Random",
      "Vector Math",
      "S"
    ],
    [
      "Vectors in.001",
      "Vectors",
      "Script Generator",
      "tropism"
    ],
    [
      "Vector Math",
      "W",
      "Script Generator",
      "End Vertices"
    ],
    [
      "Vectors in",
      "Vectors",
      "Script Generator",
      "Start Vertices"
    ],
    [
      "Script Generator",
      "Vertices",
      "Skin Viewer Draw",
      "vertices"
    ],
    [
      "Script Generator",
      "Edges",
      "Skin Viewer Draw",
      "edges"
    ],
    [
      "Script Generator",
      "Branch radii",
      "Skin Viewer Draw",
      "radii"
    ],
    [
      "Script Generator",
      "Leaf matrices",
      "Sv Instancer Node",
      "matrix"
    ]
  ]
}